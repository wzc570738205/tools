(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{392:function(e,t,a){"use strict";a.r(t);var n=a(45),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"插件说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件说明"}},[e._v("#")]),e._v(" 插件说明")]),e._v(" "),a("p",[e._v("没有规矩不成方圆，为了统一标准接口数据格式，统一监控追踪，统一编码规范，统一代码生成机制等，集团所有Java项目须引入common公共核心插件。"),a("br"),e._v("\n集团框架核心包，所有集团后端项目须引入该核心插件。主要功能有：")]),e._v(" "),a("ul",[a("li",[e._v("提供Controller，Service, DAO(Mapper)等基类，规范开发标准，若需链路监控或框架提供的其他扩展功能，必须继承这些父类。")]),e._v(" "),a("li",[e._v("提供完善的异常管理和统一异常处理能力。")]),e._v(" "),a("li",[e._v("提供Response输出，便于跨项目间数据访问。")]),e._v(" "),a("li",[e._v("提供Domain模型封装，对Entity实体，DTO，Domain等模型提供规范，并提供实体与DTO快速转换机制。")]),e._v(" "),a("li",[e._v("对Mybatis-plus进行了封装，并提供了快捷的分页实现机制。")]),e._v(" "),a("li",[e._v("框架提供统一后台任务与多线程处理机制，Spring事件监听机制。")]),e._v(" "),a("li",[e._v("提供链路追踪监控功能，对每一个请求出入参，异常堆栈，耗时等关键信息自动捕捉，便于问题定位解决。")]),e._v(" "),a("li",[e._v("跨域访问提供开关支持。")]),e._v(" "),a("li",[e._v("标准Swagger文档支持。")]),e._v(" "),a("li",[e._v("完善的Log日志管理和操作日志管理能力。")]),e._v(" "),a("li",[e._v("与集团脚手架项目无缝集成。")]),e._v(" "),a("li",[e._v("对Spring Cloud Alibaba分布式框架天然支持，快速实现分布式项目部署。")])]),e._v(" "),a("p",[e._v("框架基于SpringBoot搭建，全面支持Spring Cloud Alibaba微服务架构。")]),e._v(" "),a("h2",{attrs:{id:"配置步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置步骤"}},[e._v("#")]),e._v(" 配置步骤")]),e._v(" "),a("p",[e._v("框架对应的SpringBoot对应版本为2.1.2.RELEASE。")]),e._v(" "),a("ol",[a("li",[e._v("项目中需要引入parent依赖，引入框架体系framework-core。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    <parent>\n        <groupId>com.ichinae.framework</groupId>\n        <artifactId>framework-core</artifactId>\n        <version>1.0.0</version>\n    </parent>\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("核心插件为ichinae-core-plugins-common插件，期版本已在parent依赖中统一管理，POM依赖中无需添加版本信息。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    <dependency>\n        <groupId>com.ichinae.core.plugins</groupId>\n        <artifactId>ichinae-core-plugins-common</artifactId>\n    </dependency>\n")])])]),a("h2",{attrs:{id:"启动类规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动类规则"}},[e._v("#")]),e._v(" 启动类规则")]),e._v(" "),a("ol",[a("li",[e._v("项目Application启动类配置如下")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@BaseBootApplication\n@SpringBootApplication\n@MapperScan({"com.ichinae.**.mapper*"})\n@ComponentScan(basePackages = {"com.ichinae.*"})\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("使用跨域，需要手动注入处理类")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Import({CorsConfig.class})\n")])])]),a("h2",{attrs:{id:"api接口规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api接口规范"}},[e._v("#")]),e._v(" API接口规范")]),e._v(" "),a("p",[e._v("没有规矩不成方圆，为了统一项目间的调用返回，统一开发标准，统一API文档，统一代码生成机制等，定制如下API接口开发标准。")]),e._v(" "),a("ol",[a("li",[e._v("所有接口均返回Response对象")]),e._v(" "),a("li",[e._v("数据库对应实体类Entity须集成BaseEntity")]),e._v(" "),a("li",[e._v("出参Response的data对象，继承BaseDTO或BaseDomain")]),e._v(" "),a("li",[e._v("分页入参继承Page")]),e._v(" "),a("li",[e._v("分页出参Response的data对象是Page对象")]),e._v(" "),a("li",[e._v("Response在Controller返回中定义，不要在Service中返回Response对象，Service中直接返回如List，Map，Data等业务数据。若有异常则按下规则直接抛出异常，不要捕获异常信息，框架会自动对异常进行统一处理。")]),e._v(" "),a("li",[e._v("正常Response返回")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "success":true,\n    "resultCode":"200",\n    "message":"",\n    "time":"2020-12-03 19:13:20",\n    "data":[\n        {\n            "menuCode":"userPermissions",\n            "menuName":"用户权限"\n        }\n    ]\n}\n')])])]),a("h2",{attrs:{id:"对象处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象处理"}},[e._v("#")]),e._v(" 对象处理")]),e._v(" "),a("ol",[a("li",[e._v("数据库访问实体对象继承BaseEntity，并引入@Table标记数据库表名，@Data生成Get/Set方法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package com.ichinae.base.mgr.data.entity;\n\nimport com.baomidou.mybatisplus.annotations.TableId;\nimport com.baomidou.mybatisplus.enums.IdType;\nimport com.ichinae.core.plugins.common.model.entity.BaseEntity;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n...\n\n@Data\n@Table(name = "sys_log")\npublic class SysLog extends BaseEntity {\n\n\t...\n\n\t/**\n\t * 主键标识\n\t */\n\t@ApiModelProperty(value = "主键")\n\tprivate Long id;\n\n    ...\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("DTO类须继承BaseDTO")]),e._v(" "),a("li",[e._v("若分页处理，入参须传入Page的子类。")]),e._v(" "),a("li",[e._v("Entity与DTO转换可调用toDomain方法直接转换")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    SysDeptDTO sysDeptDTO = sysDept.toDomain(SysDeptDTO.class);\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("框架支持JSR303规范，可进行入参校验。如下代码：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    @Data\npublic class User extends BaseEntity {\n\n    @TableId(value="id", type= IdType.AUTO)\n    private Long id;\n\n    @NotBlank(message = "username不能为空")\n    private String username;\n\n    @NotBlank(message = "password不能为空")\n    private String password;\n')])])]),a("p",[e._v("调用接口必须用@Valid修饰，注意必须在Controller层中，在Service中无效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    @PostMapping("/auth")\n    @ApiOperation(value = "登录", notes = "登录")\n    public Response<String> authLogin(@RequestBody @Valid User user) throws Exception {\n        return Response.data(loginService.authLogin(user));\n    }\n')])])]),a("p",[e._v("如上例所示，调用密码为空时，抛出标准异常如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    {\n        "success": false,\n        "resultCode": "400",\n        "message": "password不能为空;",\n        "time": "2020-12-23 17:55:23"\n    }\n')])])]),a("h2",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[e._v("#")]),e._v(" 异常处理")]),e._v(" "),a("p",[e._v("为了统一异常标准，便于异常统一监控管理，框架对异常进行了分类，各框架业务模块等按异常分类抛出对应的异常。"),a("br"),e._v("\n主要异常说明如下，业务模块更关注BusinessException及其子异常。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("异常分类")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("使用说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("BaseException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("项目框架所有异常父类，继承于RuntimeException异常")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("SystemException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("系统异常父类")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("FrameworkInternalSystemException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("框架内部异常")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("CodeCheckerException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("代码检查异常")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("StandardSystemException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("标准系统异常")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("BusinessException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("业务异常父类")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("StandardBusinessException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("标准业务异常类，业务可直接抛出此异常或该异常的子异常")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("BackgroundTaskExecutionException")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("后台（异步）任务异常")])])])]),e._v(" "),a("p",[e._v("业务开发中，我们需要定义异常编码ErrorCode，编写规范如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    /**\n    * @author: 王坤\n    * @date: 2020/09/24 10:16\n    */\n    public class ErrorCode{\n\n        public static final BusinessExceptionDesc SYS_ROLE_DEL = new BusinessExceptionDesc("10008", "角色删除失败，没有用户属于此角色");\n\n        public static final BusinessExceptionDesc SYS_USER_EXIST = new BusinessExceptionDesc("10008", "账户已存在");\n\n        public static final BusinessExceptionDesc SYS_USER_NOT_EXIST = new BusinessExceptionDesc("10008", "账户不存在");\n\n        public static final BusinessExceptionDesc SYS_LOGIN_EXPIRED = new BusinessExceptionDesc("10008", "登陆已过期,请重新登陆");\n\n        public static final BusinessExceptionDesc SYS_PARAM_LOST = new BusinessExceptionDesc("10008", "缺少必填参数");\n\n    }\n')])])]),a("p",[e._v("异常直接抛出，不要try...catch...捕获")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    ......\n    if (user == null) {\n        //没找到帐号\n            throw new StandardBusinessException(ErrorCode.SYS_USER_NOT_EXIST);\n    }\n    ......\n")])])]),a("p",[e._v("异常返回Json")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    {\n        "success":false,\n        "resultCode":"10008",\n        "message":"账户不存在",\n        "time":"2020-12-03 19:31:29"\n    }\n')])])]),a("p",[e._v("使用统一异常方案，若配合使用Monitor监控插件，即可对每个请求的异常信息进行跟踪查询管理。")]),e._v(" "),a("ul",[a("li",[e._v("请求监控\n"),a("img",{attrs:{src:"/tools/base_record.png",alt:"base_record.png"}})]),e._v(" "),a("li",[e._v("异常详情\n"),a("img",{attrs:{src:"/tools/base_exception.png",alt:"base_exception.png"}})])]),e._v(" "),a("h2",{attrs:{id:"service规范和数据访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service规范和数据访问"}},[e._v("#")]),e._v(" Service规范和数据访问")]),e._v(" "),a("ol",[a("li",[e._v("所有业务Service均需继承IBaseService接口和BaseService实现类。\n编码规范为公司标准规范，及接口为XXXService，实现类为XXXServiceImpl。否则启动项目时，代码检查会抛出编码规范异常。")]),e._v(" "),a("li",[e._v("框架采用MybatisPlus进行数据访问，若需要Mybatis支持请继承IMybatisService接口和MybatisService实现类，自动拥有增删查改分页等基本功能，无需*mapper.xml支持。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Service\npublic class LoginServiceImpl extends BaseService implements LoginService {\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("可使用EntityWrapper进行代码数据操作，无需xml配置。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    public List<SysDept> list(SysDeptParam sysDeptParam) {\n        EntityWrapper<SysDept> entityWrapper = new EntityWrapper<>();\n        entityWrapper.eq("parent_id", sysDeptParam.getParentId());\n        return deptMapper.selectList(entityWrapper);\n    }\n')])])]),a("h2",{attrs:{id:"分页配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页配置"}},[e._v("#")]),e._v(" 分页配置")]),e._v(" "),a("p",[e._v("框架通过AOP方式自动对分页进行了处理，业务无需专门进行分页操作。\n1.项目中导入Page对象，注意导入路径为com.ichinae.core.plugins.common.model.page")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import Page;\n")])])]),a("p",[e._v("2.mapper层或Service层对需要分页的查询方法以“ByPage”结尾，并且入参必须有一个为Page的子类，AOP会根据Service实现类的方法ByPage后缀和page入参进行切入做分页处理，controller不做任何分页处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    public Page<McRequestRecord> listByPage(McRecordParam mcRecordParam) {\n\n        mcRequestRecordMapper.selectByReq(mcRecordParam.getRequestRecordId());\n        return mcRecordParam;\n    }\n")])])]),a("p",[e._v("如上面实例代码，入参McRecordParam必须继承Page类，传入PageNum和PageSize。返回值需要返回个Page对象，此处可直接将入参返回即可，框架会对返回值进行统一处理。\n3.我们也可在Controller层，直接通过继承MybatisService父类的listByPage方法实现，Service不用写任何分页代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    @GetMapping("/list")\n    @ApiOperation(value = "查询系统参数列表", notes = "查询系统参数列表")\n    public Response<Page<SysLog>> listParam(SysLogParam sysLog){\n        EntityWrapper<SysLog> entityWrapper = new EntityWrapper<>();\n        Page<SysLog> list = logService.selectByPage(new EntityWrapper<SysLog>(), sysLog);\n        return Response.data(list);\n    }\n')])])]),a("h2",{attrs:{id:"跨域配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域配置"}},[e._v("#")]),e._v(" 跨域配置")]),e._v(" "),a("p",[e._v("框架支持前后端分离部署，支持跨域访问请求。跨域配置生效需在application-dev.properties 中配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   cors.enable=true\n")])])]),a("h2",{attrs:{id:"多线程与后台任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程与后台任务"}},[e._v("#")]),e._v(" 多线程与后台任务")]),e._v(" "),a("ol",[a("li",[e._v("继承BackgroundTask来定义后台任务，重写其execute方法。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/**\n * 后台任务接口\n * \n * @param <V>\n */\npublic interface IBackgroundTask<V> extends Callable<V> {\n\t\t\n\t/**\n\t * 执行任务\n\t * \n\t * @return\n\t * @throws Exception\n\t */\n\tV execute() throws Exception;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component("requestMonitorDispatcherTask")\n@Scope("prototype")\npublic class RequestMonitorDispatcherTask extends BackgroundTask<Void>\n{ \n        ...\n        @Override\n        public Void execute() throws Exception {\n            dispatchRequestMonitorData();\n            return null;\n        }\n        ...\n}\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("需要使用后台任务的业务类中，添加任务执行器BackgroundTaskExecutorService。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Autowired\nprivate BackgroundTaskExecutorService backgroundTaskExecutorService;\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("启动后台任务")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 创建任务对象，并纳入Spring上下文中，可以使用任务内的Spring Autowired注解对象。\nRequestMonitorDispatcherTask dispatcherTask = this.getApplicationContext().getBean("requestMonitorDispatcherTask", RequestMonitorDispatcherTask.class);\ndispatcherTask.setMonitorData(event.getSource()); // 传递业务数据\nbackgroundTaskExecutorService.submit(dispatcherTask); // 启动任务\n')])])]),a("h2",{attrs:{id:"事件机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件机制"}},[e._v("#")]),e._v(" 事件机制")]),e._v(" "),a("p",[e._v("框架提供Spring Event事件处理解决方案，通过SystemEventDriver进行事件驱动管理。具体实现需参考以下三步：")]),e._v(" "),a("ol",[a("li",[e._v("定义事件源Event，需要和对应事件监听器处理事件保持一致。")]),e._v(" "),a("li",[e._v("业务事件监听器需继承BaseEventListener基础事件监听器，添加@Component注解确保纳入Spring上下文中，并重写其onFire监听方法进行业务处理。如下例请求事件监听器代码：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component\npublic class RequesMonitorListener extends BaseEventListener\n{\n    ...\n    // 后台任务处理服务\n\t@Autowired\n\tprivate BackgroundTaskExecutorService backgroundTaskExecutorService;\n    ...\n\n    // 事件监听方法\n\tpublic void onFire(BaseEvent event, ListenerChain chain, ApplicationContext applicationContext, ServletContext servletContext)\n\t\t\tthrows Exception\n\t{\n        // 启动异步后台任务，并放入Spring上下文中\n\t\tRequestMonitorDispatcherTask dispatcherTask = this.getApplicationContext().getBean("requestMonitorDispatcherTask", RequestMonitorDispatcherTask.class);\n\t\tdispatcherTask.setMonitorData(event.getSource());\n\t\tbackgroundTaskExecutorService.submit(dispatcherTask);\n\t\tchain.stop();\n\t}\n\n    // 根据事件源过滤事件\n\tprotected boolean isFilterEvent(Object eventSource)\n\t{\n\t\t// ....\n\t\treturn false;\n\t}\n\n    // 获取全局事件名称\n\t@Override\n\tpublic String getListenEventName() {\n\t\treturn "_MONITOR";\n\t}\n}\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("业务根据需要调用框架BaseComponent封装的publishEvent方法抛出事件，触发事件机制。")])]),e._v(" "),a("h2",{attrs:{id:"微服务支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务支持"}},[e._v("#")]),e._v(" 微服务支持")]),e._v(" "),a("p",[e._v("框架全面支持SpringCloud Alibaba框架，对应版本为Spring Cloud Alibaba 2.1.0.RELEASE。\n后续根据需要会退出对于K8S的微服务调用解决方案。")]),e._v(" "),a("h2",{attrs:{id:"日志管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志管理"}},[e._v("#")]),e._v(" 日志管理")]),e._v(" "),a("p",[e._v("框架采用logback进行日志采集管理，对Windows及Linux均支持灵活配置。\n具体配置如下：")]),e._v(" "),a("ol",[a("li",[e._v("在yml配置文件中配置日志文件及部署路径，如下例所示，配置文件名为logback-spring.xml，改文件在资源文件中配置。部署后日志的生成路径为/log文件夹下。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("logging:\n  config: classpath:logback-spring.xml\n  path: ./logs\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("logback-spring.xml配置可从脚手架中获取，一般不用修改。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    <?xml version="1.0" encoding="UTF-8"?>\n    <configuration scan="true" scanPeriod="600 seconds" debug="false">\n        \x3c!-- 取配置文件中的logging.appender的值，Console或者File,大小写不敏感，如果没有配置这个值，那么windows下是控制台打印，linux下是文件记录 --\x3e\n        <springProperty name="appender-ref" source="logging.appender"/>\n        <springProperty name="rootLevel" source="logging.level.root" defaultValue="INFO"/>\n        <springProperty name="applicationName" source="spring.application.name"/>\n        <springProperty name="profilesActive" source="spring.profiles.active"/>\n        <springProperty name="logging.pattern" source="logging.pattern"\n                        defaultValue="%d [${applicationName}] [%thread] %-5level %c{10} - %msg%n"/>\n        \x3c!-- Windows系统下，或者 appender-ref的值小写是console，则输出到控制台 --\x3e\n        <if condition=\'(!"file".equals(p("appender-ref").toLowerCase()) &amp;&amp; p("os.name").contains("Windows"))\n                        || "console".equals(p("appender-ref").toLowerCase())\'>\n            <then>\n                \x3c!-- 取springboot环境变量中logging.path的值，如果没有，默认在当前工程目录的log下输出日志 --\x3e\n                <springProperty name="logPath" source="logging.path" defaultValue="D:/log/${applicationName}"/>\n                <springProperty name="logging.file.maxFileSize" source="logging.file.maxFileSize"\n                                defaultValue="100MB"/>\n                <springProperty name="logging.file.maxHistory" source="logging.file.maxHistory" defaultValue="3"/>\n                <springProperty name="logging.file.totalSizeCap" source="logging.file.totalSizeCap"\n                                defaultValue="1GB"/>\n                \x3c!-- 生产开始 --\x3e\n                <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n                    <File>${logPath}/${applicationName}.log</File>\n                    \x3c!-- 日志文件开启卷存 --\x3e\n                    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">\n                        <FileNamePattern>${logPath}/%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n                        <maxFileSize>${logging.file.maxFileSize}</maxFileSize>\n                        <maxHistory>${logging.file.maxHistory}</maxHistory>\n                        <totalSizeCap>${logging.file.totalSizeCap}</totalSizeCap>\n                    </rollingPolicy>\n                    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">\n                        <pattern>${logging.pattern}</pattern>\n                    </encoder>\n                </appender>\n                \x3c!-- 控制台输出 --\x3e\n                <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">\n                    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">\n                        \x3c!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--\x3e\n                        \x3c!-- pattern 格式说明 http://aub.iteye.com/blog/1103685 --\x3e\n                        <pattern>${logging.pattern}</pattern>\n                    </encoder>\n                </appender>\n                \x3c!-- 具体包的日志级别在application.properties中配置，不在这里指定 --\x3e\n                <root level="${rootLevel}">\n                    <appender-ref ref="Console"/>\n                    <appender-ref ref="FILE"/>\n                </root>\n            </then>\n            \x3c!-- =================================以下是服务器上用的配置 =================================  --\x3e\n            <else>\n                \x3c!-- 取springboot环境变量中logging.path的值，如果没有，默认在当前工程目录的log下输出日志 --\x3e\n                <springProperty name="logPath" source="logging.path" defaultValue="/tmp/log/${applicationName}"/>\n                <springProperty name="logging.file.maxFileSize" source="logging.file.maxFileSize"\n                                defaultValue="100MB"/>\n                <springProperty name="logging.file.maxHistory" source="logging.file.maxHistory" defaultValue="3"/>\n                <springProperty name="logging.file.totalSizeCap" source="logging.file.totalSizeCap"\n                                defaultValue="1GB"/>\n                \x3c!-- 生产开始 --\x3e\n                <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n                    <File>${logPath}/${applicationName}.log</File>\n                    \x3c!-- 日志文件开启卷存 --\x3e\n                    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">\n                        <FileNamePattern>${logPath}/back/%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n                        <maxFileSize>${logging.file.maxFileSize}</maxFileSize>\n                        <maxHistory>${logging.file.maxHistory}</maxHistory>\n                        <totalSizeCap>${logging.file.totalSizeCap}</totalSizeCap>\n                    </rollingPolicy>\n                    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">\n                        <pattern>${logging.pattern}</pattern>\n                    </encoder>\n                </appender>\n\n                \x3c!-- 生产结束 --\x3e\n                \x3c!-- 具体包的日志级别在application.properties中配置，不在这里指定 --\x3e\n                <logger name="org.apache" level="WARN"/>\n                <logger name="org.springframework" level="WARN"/>\n                <logger name="com.alibaba.nacos" level="WARN"/>\n                <root level="${rootLevel}">\n                    <appender-ref ref="FILE"/>\n                </root>\n            </else>\n        </if>\n    </configuration>\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);