(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{388:function(n,e,r){"use strict";r.r(e);var o=r(45),t=Object(o.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"插件说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#插件说明"}},[n._v("#")]),n._v(" 插件说明")]),n._v(" "),r("p",[n._v("消息队列核心包，集成阿里和rocketmq两个体系，对外统一一套参数，本项目基于springboot，集成了apachemq和阿里巴巴的ons，在通过配置进行的时候很容易集成。")]),n._v(" "),r("h2",{attrs:{id:"如何应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何应用"}},[n._v("#")]),n._v(" 如何应用")]),n._v(" "),r("ol",[r("li",[n._v("在pom文件中引入依赖，当前版本"),r("code",[n._v("1.0.0.RELEASE")])])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("<dependency>\n\t<groupId>com.ichinae.core.plugins</groupId>\n\t<artifactId>ichinae-core-plugins-jms</artifactId>\n\t<version>1.0.0</version>\n</dependency>\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[n._v("在application.yml中配置mq的相应配置")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("mq:\n  producer:\n    enable: true\n    nameaddr: http://MQ_INST_1445820840606424_BaSysZxM.mq-internet-access.mq-internet.aliyuncs.com:80\n    drive: AliProducer\n    group: GID_task-dev\n    accessKey: LTAI0xIlAuoGvQKi\n    secretKey: 0JaSglnMVyAy1T8y1mEi5fFqHbntgS\n    sender:\n      topic: task-dev\n      tags: task-dev\n  consumer:\n    enable: true\n    nameaddr: http://MQ_INST_1445820840606424_BaSysZxM.mq-internet-access.mq-internet.aliyuncs.com:80\n    drive: AliConsumer\n    group: GID_task-dev\n    tag: task-dev\n    topic: task-dev\n    accessKey: LTAI0xIlAuoGvQKi\n    secretKey: 0JaSglnMVyAy1T8y1mEi5fFqHbntgS\n\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[n._v("在应用中创建注入读取配置，其中")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('import MessageSender;\nimport MqFactory;\nimport com.ichinae.core.plugins.jms.mq.*;\nimport MqConsumerConfig;\nimport MqProducerConfig;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class MqProducerConfiguration {\n    @Bean("alimqProducerConfig")\n    @ConfigurationProperties(prefix = "mq.producer")\n    @ConditionalOnProperty(name = "mq.producer.enable",havingValue="true")\n    protected MqProducerConfig alimqProducerConfig() {\n        return new MqProducerConfig();\n    }\n\n    @Bean("alimqProducer")\n    @ConditionalOnProperty(name = "mq.producer.enable",havingValue="true")\n    protected MqProducer alimqProducer(MqProducerConfig alimqProducerConfig) {\n        return MqFactory.buildProducer(alimqProducerConfig);\n    }\n\n    @Bean("alimqSender")\n    @ConditionalOnProperty(name = "mq.producer.enable",havingValue="true")\n    @ConfigurationProperties(prefix = "mq.alimq.producer.sender")\n    protected MessageSender alimqSender(MqProducer alimqProducer) {\n        return new MessageSender(alimqProducer);\n    }\n}\n\n\nimport MessageSender;\nimport MqFactory;\nimport com.ichinae.core.plugins.jms.mq.*;\nimport MqConsumerConfig;\nimport MqProducerConfig;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class MqConsumerConfiguration {\n\n    @Bean("alimqConsumerConfig")\n    @ConfigurationProperties(prefix = "mq.consumer")\n    @ConditionalOnProperty(name = "mq.consumer.enable",havingValue="true")\n    protected MqConsumerConfig alimqConsumerConfig() {\n        return new MqConsumerConfig();\n    }\n\n    @Bean("alimqConsumer")\n    @ConditionalOnProperty(name = "mq.consumer.enable",havingValue="true")\n    protected MqConsumer alimqConsumer(MqConsumerConfig alimqConsumerConfig) {\n        MessageProcessor implConsumer = new ConsumerMessageAliImpl();\n        return MqFactory.buildConsumer(alimqConsumerConfig, implConsumer);\n    }\n}\n\n 用户实现MessageProcessor的接口类ConsumerMessageAliImpl。\n')])])]),r("ol",{attrs:{start:"4"}},[r("li",[n._v("在应用中开始使用")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('发送\n    @Autowired\n    @Qualifier("alimqSender")\n    private MessageSender alimqSender;\n\n    public void sendMessageAli() {\n        try {\n            Long deliverTime = System.currentTimeMillis() + 1000 * 15;\n            SendResponse sendCallback = alimqSender.sendSync("发送aliMq消息".getBytes(), deliverTime);\n            System.out.println(sendCallback);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    \n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('消费\npublic class ConsumerMessageAliImpl implements MessageProcessor {\n    private Logger log = LoggerFactory.getLogger(ConsumerMessageAliImpl.class);\n\n    @Override\n    public boolean process(MqMessage msgs) {\n        String message = new String(msgs.getBody());\n        log.info("ali的消息" + message);\n        return true;\n    }\n}\n')])])]),r("h2",{attrs:{id:"注意事项"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[n._v("#")]),n._v(" 注意事项")]),n._v(" "),r("p",[n._v("在使用过程中需要注意有如下问题:")]),n._v(" "),r("ol",[r("li",[n._v("mq中一个group在一个jvm中只能有1个实例。否则会以最后启动的为准。")]),n._v(" "),r("li",[n._v("mq消费消息订阅到的是topic，tag使用的是过滤，即有消息（topic1，tag1），\n有两个消费者订阅分别是（topic1，tag）和（topic，tag1）此时这两个消费者\n均会对该消息有响应，第一个会因为订阅不是自己的tag而被过滤掉，第二个会正常消费。")]),n._v(" "),r("li",[n._v("同一个消费者组内订阅关系必须一致，例如两个消费者订阅分别为（topic，tag1），（topic，tag2）\n此时会按照启动顺序，最后启动的消费者生效，之前的会无效。")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code")])])])}),[],!1,null,null,null);e.default=t.exports}}]);