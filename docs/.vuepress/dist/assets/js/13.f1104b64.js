(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{381:function(t,a,e){"use strict";e.r(a);var s=e(45),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"服务目的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务目的"}},[t._v("#")]),t._v(" 服务目的")]),t._v(" "),e("p",[t._v("该平台主要基于Alibaba开源项目dataX进行封装和二次开发，提供复杂网络环境下、丰富的异构数据源之间高速稳定的数据移动能力，以及繁杂业务背景下的数据同步解决方案。支持MySQL、Oracle、postgresql、sqlserver、hive、hbase、mongodb、clickhouse、kafka、restful等多种数据源之间的一键全增量同步解决方案。"),e("br"),t._v('\n并且提供简单易用的操作界面datax-web服务，降低用户使用DataX的学习成本，缩短任务配置时间，避免配置过程中出错。用户可通过页面选择数据源即可创建数据同步任务，RDBMS数据源可批量创建数据同步任务，支持实时查看数据同步进度及日志并提供终止同步功能，集成并二次开发xxl-job可根据时间、自增主键增量同步数据。任务"执行器"支持集群部署，支持执行器多节点路由策略选择，支持超时控制、失败重试、失败告警、任务依赖，执行器CPU.内存.负载的监控等等。')]),t._v(" "),e("h2",{attrs:{id:"快速使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速使用"}},[t._v("#")]),t._v(" 快速使用")]),t._v(" "),e("p",[t._v("1、部署dataX："),e("br"),t._v("\n(1)、拉取代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://59.110.237.110/svn/项目/应用软件公共组件/数据调度/code/后端/DataX\n")])])]),e("p",[t._v("(2)、maven打包：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mvn -U clean package assembly:assembly -Dmaven.test.skip=true\n")])])]),e("p",[t._v("(3)、将target/datax.tar.gz上传至规划的datax-web执行器所在服务器,并解压"),e("br"),t._v("\n注：服务器需要有jdk8以及python2运行环境"),e("br"),t._v("\n(4)、自检脚本：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("python {YOUR_DATAX_HOME}/bin/datax.py {YOUR_DATAX_HOME}/job/job.json\n")])])]),e("p",[t._v("2、部署datax-web："),e("br"),t._v("\n(1)、拉取代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://59.110.237.110/svn/项目/应用软件公共组件/数据调度/code/后端/datax-web\n")])])]),e("p",[t._v("(2)、maven打包：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mvn clean install \n")])])]),e("p",[t._v("(3)、上传build/datax-web-{VERSION}.tar.gz至服务器，并解压")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("tar -zxvf datax-web-{VERSION}.tar.gz\n")])])]),e("p",[t._v("(4)、进入解压后的目录，找到bin目录下面的install.sh文件，如果选择交互式的安装，则直接执行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("./bin/install.sh\n")])])]),e("p",[t._v("在交互模式下，对各个模块的package压缩包的解压以及configure配置脚本的调用，都会请求用户确认,可根据提示查看是否安装成功，如果没有安装成功，可以重复尝试；如果不想使用交互模式，跳过确认过程，则执行以下命令安装")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/bin/install.sh --force\n")])])]),e("p",[t._v("(5)、创建数据库，执行datax-web/bin/db/datax_web.sql"),e("br"),t._v("\n(6)、修改datax-admin配置文件数据库配置:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vi ./modules/datax-admin/conf/bootstrap.properties  \n#Database  \n#DB_HOST=  \n#DB_PORT=  \n#DB_USERNAME=  \n#DB_PASSWORD=  \n#DB_DATABASE=  \n")])])]),e("p",[t._v("(7)、修改环境配置参数和邮件服务(可选)：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vi ./modules/datax-admin/bin/env.properties \n")])])]),e("p",[t._v("(8)、修改执行器datax-execute配置参数，指定PYTHON_PATH的路径，执行器支持分布式部署，调度中心datax-admin支持多种任务执行路由策略：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vi /modules/datax-execute/bin/env.properties  \n###执行datax的python脚本地址  \nPYTHON_PATH=  \n###保持和datax-admin服务的端口一致；默认是9527，如果没改datax-admin的端口，可以忽略,如果与datax-admin服务在同一台服务器，DATAX_ADMIN_HOST可以忽略  \nDATAX_ADMIN_PORT=  \nDATAX_ADMIN_HOST=  \n")])])]),e("p",[t._v("(9)、启动服务："),e("br"),t._v("\n首先启动调度中心datax-admin：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t./modules/datax-admin/bin/datax-admin.sh start\n")])])]),e("p",[t._v("然后分别启动各个执行器datax-execute：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t./modules//datax-execute/bin/datax-executor.sh start\n")])])]),e("p",[t._v("4、部署datax-web-ui:"),e("br"),t._v("\n(1)、拉取代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://59.110.237.110/svn/项目/应用软件公共组件/数据调度/code/前端/datax-web-ui  \n")])])]),e("p",[t._v("(2)、打包：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm run build:prod\n")])])]),e("p",[t._v("(3)、上传至服务器后，配置nginx代理\n(4)、浏览器打开系统，使用默认密码登录")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("userName：admin  \npassword：123456\n")])])]),e("h2",{attrs:{id:"使用流程介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用流程介绍"}},[t._v("#")]),t._v(" 使用流程介绍")]),t._v(" "),e("p",[t._v("1、创建数据源"),e("br"),t._v(" "),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/add_datasource.png",alt:""}}),t._v("\n2、创建任务模版"),e("br"),t._v(" "),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/template_list.png",alt:""}}),t._v("\n3、构建JSON脚本\n(1)、步骤一，步骤二，选择第二步中创建的数据源，JSON构建目前支持的数据源有hive,mysql,oracle,postgresql,sqlserver,hbase,mongodb,clickhouse,kafka,restful，其它数据源的JSON构建正在开发中,暂时需要手动编写\n"),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/build.png",alt:""}}),t._v("\n(2)、字段映射\n"),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/mapping.png",alt:""}}),t._v("\n(3)、点击构建，生成json,此时可以选择复制json然后创建任务，选择datax任务，将json粘贴到文本框。也可以点击选择模版，直接生成任务。\n"),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/select_template.png",alt:""}}),t._v("\n4、批量创建任务\n"),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/batch_build_r.png",alt:""}}),t._v(" "),e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/batch_build_w.png",alt:""}}),t._v("\n5、任务创建介绍（关联模版创建任务不再介绍，具体参考3. 构建JSON脚本）")]),t._v(" "),e("h4",{attrs:{id:"支持datax任务-shell任务-python任务-powershell任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持datax任务-shell任务-python任务-powershell任务"}},[t._v("#")]),t._v(" 支持DataX任务,Shell任务，Python任务，PowerShell任务")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/datax.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://datax-web.oss-cn-hangzhou.aliyuncs.com/doc/shell.png",alt:""}})]),t._v(" "),e("ul",[e("li",[e("p",[t._v("阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；")]),t._v(" "),e("ul",[e("li",[t._v("单机串行：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；")]),t._v(" "),e("li",[t._v("丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；")]),t._v(" "),e("li",[t._v("覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；")])])]),t._v(" "),e("li",[e("p",[t._v("增量增新建议将阻塞策略设置为丢弃后续调度或者单机串行")]),t._v(" "),e("ul",[e("li",[t._v("设置单机串行时应该注意合理设置重试次数(失败重试的次数*每次执行时间<任务的调度周期)，重试的次数如果设置的过多会导致数据重复，例如任务30秒执行一次，每次执行时间需要20秒，设置重试三次，如果任务失败了，第一个重试的时间段为1577755680-1577756680，重试任务没结束，新任务又开启，那新任务的时间段会是1577755680-1577758680")])])]),t._v(" "),e("li",[e("p",[t._v("增量参数设置")]),t._v(" "),e("h3",{attrs:{id:"一、根据日期进行增量数据抽取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、根据日期进行增量数据抽取"}},[t._v("#")]),t._v(" 一、根据日期进行增量数据抽取：")]),t._v(" "),e("h4",{attrs:{id:"_1、页面任务配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、页面任务配置"}},[t._v("#")]),t._v(" 1、页面任务配置")]),t._v(" "),e("ul",[e("li",[t._v("1、任务类型选DataX任务")]),t._v(" "),e("li",[t._v("2、辅助参数选择时间自增")]),t._v(" "),e("li",[t._v("3、增量开始时间选择，即sql中查询时间的开始时间，用户使用此选项方便第一次的全量同步。第一次同步完成后，该时间被更新为上一次的任务触发时间，任务失败不更新。")]),t._v(" "),e("li",[t._v("4、增量时间字段,-DlastTime='%s' -DcurrentTime='%s' 先来解析下这段字符串")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t1.-D是DataX参数的标识符，必配\n\t2.-D后面的lastTime和currentTime是DataX json中where条件的时间字段标识符，必须和json中的变量名称保持一致\n\t3.='%s'是项目用来去替换时间的占位符，比配并且格式要完全一致\n\t4.注意-DlastTime='%s'和-DcurrentTime='%s'中间有一个空格，空格必须保留并且是一个空格\n")])])]),e("ul",[e("li",[t._v("5、时间格式，可以选择自己数据库中时间的格式，也可以通过json中配置sql时间转换函数来处理")])]),t._v(" "),e("h4",{attrs:{id:"_2、json配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、json配置"}},[t._v("#")]),t._v(" 2、JSON配置")]),t._v(" "),e("p",[t._v("datax.json")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t{\n\t"job": {\n\t\t"setting": {\n\t\t"speed": {\n\t\t\t"channel": 16\n\t\t}\n\t\t},\n\t\t"content": [\n\t\t{\n\t\t\t"reader": {\n\t\t\t"name": "mysqlreader",\n\t\t\t"parameter": {\n\t\t\t\t"splitPk": "id",\n\t\t\t\t"username": "root",\n\t\t\t\t"password": "root",\n\t\t\t\t"column": [\n\t\t\t\t"*"\n\n\t\t\t\t],\n\t\t\t\t"connection": [\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\t"jdbcUrl": [\n\t\t\t\t\t"jdbc:mysql://localhost:3306/test?characterEncoding=utf8"\n\t\t\t\t\t],\n\t\t\t\t\t"querySql": [\n\t\t\t"select * from test_list where operationDate >= FROM_UNIXTIME(${lastTime}) and operationDate < FROM_UNIXTIME(${currentTime})"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t},\n\t\t\t"writer": {\n\t\t\t"name": "mysqlwriter",\n\t\t\t"parameter": {\n\t\t\t\n\t\t\t\t"username": "root",\n\t\t\t\t"password": "123456",\n\t\t\t\t"column": [\n\t\t\t\t"*"\n\t\t\t\t],\n\t\t\t\t"batchSize": "4096",\n\t\t\t\t"connection": [\n\t\t\t\t{\n\t\t\t\t\t"jdbcUrl": "jdbc:mysql://localhost:3307/test?characterEncoding=utf8",\n\t\t\t\t\t"table": [\n\t\t\t\t\t"test_list"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\t]\n\t}\n\t}\n')])])]),e("p",[t._v("querySql解析")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select * from test_list where operationDate >= ${lastTime} and operationDate < ${currentTime}\n")])])]),e("ul",[e("li",[t._v("1.此处的关键点在${lastTime}，${currentTime}，${}是DataX动态参数的固定格式，lastTime，currentTime就是我们页面配置中 -DlastTime='%s' -DcurrentTime='%s'中的lastTime，currentTime，注意字段一定要一致。")]),t._v(" "),e("li",[t._v("2.如果任务配置页面，时间类型选择为时间戳但是数据库时间格式不是时间戳，例如是：2019-11-26 11:40:57 此时可以用FROM_UNIXTIME(${lastTime})进行转换。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select * from test_list where operationDate >= FROM_UNIXTIME(${lastTime}) and operationDate < FROM_UNIXTIME(${currentTime})\n")])])]),e("h3",{attrs:{id:"二、根据自增id进行增量数据抽取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、根据自增id进行增量数据抽取"}},[t._v("#")]),t._v(" 二、根据自增Id进行增量数据抽取")]),t._v(" "),e("h4",{attrs:{id:"_1-页面任务配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-页面任务配置"}},[t._v("#")]),t._v(" 1.页面任务配置")]),t._v(" "),e("ul",[e("li",[t._v("1.任务类型选DataX任务")]),t._v(" "),e("li",[t._v("2.辅助参数选择主键自增")]),t._v(" "),e("li",[t._v("3.增量主键开始ID选择，即sql中查询ID的开始ID，用户使用此选项方便第一次的全量同步。第一次同步完成后，该ID被更新为上一次的任务触发时最大的ID，任务失败不更新。")]),t._v(" "),e("li",[t._v("4.增量时间字段,-DstartId='%s' -DendId='%s' 先来解析下这段字符串")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.-D是DataX参数的标识符，必配\n2.-D后面的startId和endId是DataX json中where条件的id字段标识符，必须和json中的变量名称保持一致，endId是任务在每次执行时获取当前表maxId，也是下一次任务的startId\n3.='%s'是项目用来去替换时间的占位符，比配并且格式要完全一致\n4.注意-DstartId='%s'和-DendId='%s' 中间有一个空格，空格必须保留并且是一个空格\n5.reader数据源，选择任务同步的读数据源\n6.配置reader数据源中需要同步数据的表名及该表的主键\n")])])]),e("h4",{attrs:{id:"_2-json配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-json配置"}},[t._v("#")]),t._v(" 2.JSON配置")]),t._v(" "),e("p",[t._v("datax.json")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t{\n"job": {\n\t"setting": {\n\t"speed": {\n\t\t"channel": 3,\n\t\t"byte": 1048576\n\t},\n\t"errorLimit": {\n\t\t"record": 0,\n\t\t"percentage": 0.02\n\t}\n\t},\n\t"content": [\n\t{\n\t\t"reader": {\n\t\t"name": "mysqlreader",\n\t\t"parameter": {\n\t\t\t"username": "yRjwDFuoPKlqya9h9H2Amg==",\n\t\t\t"password": "yRjwDFuoPKlqya9h9H2Amg==",\n\t\t\t"splitPk": "",\n\t\t\t"connection": [\n\t\t\t{\n\t\t\t\t"querySql": [\n\t\t\t\t"select * from job_log where id>= ${startId} and id< ${endId}"\n\t\t\t\t],\n\t\t\t\t"jdbcUrl": [\n\t\t\t\t"jdbc:mysql://localhost:3306/datax_web"\n\t\t\t\t]\n\t\t\t}\n\t\t\t]\n\t\t}\n\t\t},\n\t\t"writer": {\n\t\t"name": "mysqlwriter",\n\t\t"parameter": {\n\t\t\t"username": "mCFD+p1IMsa0rHicbQohcA==",\n\t\t\t"password": "PhYxJmA/nuBJD1OxKTRzZH8sxuRddOv83hdqDOVR+i0=",\n\t\t\t"column": [\n\t\t\t"`id`",\n\t\t\t"`job_group`",\n\t\t\t"`job_id`",\n\t\t\t"`job_desc`",\n\t\t\t"`executor_address`",\n\t\t\t"`executor_handler`",\n\t\t\t"`executor_param`",\n\t\t\t"`executor_sharding_param`",\n\t\t\t"`executor_fail_retry_count`",\n\t\t\t"`trigger_time`",\n\t\t\t"`trigger_code`",\n\t\t\t"`trigger_msg`",\n\t\t\t"`handle_time`",\n\t\t\t"`handle_code`",\n\t\t\t"`handle_msg`",\n\t\t\t"`alarm_status`",\n\t\t\t"`process_id`",\n\t\t\t"`max_id`"\n\t\t\t],\n\t\t\t"connection": [\n\t\t\t{\n\t\t\t\t"table": [\n\t\t\t\t"job_log"\n\t\t\t\t],\n\t\t\t\t"jdbcUrl": "jdbc:mysql://47.98.125.243:3306/datax_web"\n\t\t\t}\n\t\t\t]\n\t\t}\n\t\t}\n\t}\n\t]\n}\n}\n')])])]),e("p",[t._v("querySql解析")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select * from job_log where id>= ${startId} and id< ${endId}\n")])])]),e("ul",[e("li",[t._v("1.此处的关键点在${startId}，${endId}，${}是DataX动态参数的固定格式，startId，endId就是我们页面配置中 -DstartId='%s' -DendId='%s'中的startId，endId，注意字段一定要一致。")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);